apply plugin: 'java'

project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

/*
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

task copyDocker(type: Copy) {
    from 'src/test/docker-compose/'
    into 'build/docker-compose/'
}

task overlayDockerWithWorkingConfig(type: Copy) {
    from 'src/main/IDP_HOME/'
    into 'build/docker-compose/idp/shibboleth-idp/'
}

task addLib(type: Copy) {
    dependsOn jar

    from 'build/libs/'
    into 'build/docker-compose/idp/shibboleth-idp/webapp/WEB-INF/lib/'
}

task buildContainers(type:Exec) {
    dependsOn copyDocker, overlayDockerWithWorkingConfig, addLib

    doFirst {
        logger.lifecycle("Building the initial images may take a long time. Have plenty of bandwidth.")
    }

    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'build'
}

task runContainers(type:Exec) {
  dependsOn buildContainers

  workingDir 'build/docker-compose'
  commandLine 'docker-compose', 'up', '-d'
}

task stopContainers(type:Exec) {
    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'kill'
}

task removeContainers(type:Exec) {
    dependsOn stopContainers

    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'rm', '-f'
}

task logs(type:Exec) {
    workingDir 'build/docker-compose'
    commandLine 'docker-compose', 'logs'
}

task autoIntTest(type: Test) {
    dependsOn runContainers

    outputs.upToDateWhen {false}
    include '**/*IntegrationTest*'
    finalizedBy removeContainers

    doFirst {
        logger.lifecycle("The test will take a few moments to start while we wait for Jetty/Tomcat to start up.")
    }
}

task intTest(type: Test) {
    dependsOn testClasses

    outputs.upToDateWhen {false}
    include '**/*IntegrationTest*'

    doFirst {
        logger.lifecycle("The test will take a few moments to start while we wait for Jetty/Tomcat to start up.")
    }

}

clean {
    dependsOn removeContainers
}
