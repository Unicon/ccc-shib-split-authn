<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract, authn/conditions">

    <!--
    This is a login flow for basic-auth or form-based password authentication. The back-end step is named
    "ValidateUsernamePassword" and can be supplied by different back-end implementation files.

    Unicon Implementation Note:
    This file is the clone of system's password-authn-flow.xml. It has been modified to examine the realm/role attribute
    on the login page, then route to the appropriate handler.
    -->

    <action-state id="ExtractUsernamePasswordFromBasicAuth">
        <evaluate expression="ExtractUsernamePasswordFromBasicAuth" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ValidateUsernamePassword" />

        <!-- Fall through to a different flow if basic-auth extract fails on a passive or non-browser request. -->
        <transition on="#{ opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).isPassive() || !opensamlProfileRequestContext.isBrowserProfile() }" to="ReselectFlow" />

        <transition on="NoCredentials" to="SetRPUIInformation" />
        <transition on="InvalidCredentials" to="SetRPUIInformation" />
    </action-state>

    <action-state id="SetRPUIInformation">
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="DisplayUsernamePasswordPage" />
    </action-state>

    <view-state id="DisplayUsernamePasswordPage" view="login">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext))" result="viewScope.authenticationContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.ui.context.RelyingPartyUIContext))" result="viewScope.rpUIContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationErrorContext))" result="viewScope.authenticationErrorContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationWarningContext))" result="viewScope.authenticationWarningContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.LDAPResponseContext))" result="viewScope.ldapResponseContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
        </on-render>
        <transition on="proceed" to="ExtractUsernamePasswordFromFormRequest" />
    </view-state>


    <action-state id="ExtractUsernamePasswordFromFormRequest">
        <evaluate expression="ExtractUsernamePasswordFromFormRequest" />
        <evaluate expression="'proceed'" />

        <!-- Let the validate action handle any problems later. -->
        <transition to="ExtractAuthnProvider" />
    </action-state>

    <action-state id="ExtractAuthnProvider">
        <set type="java.lang.String" name="conversationScope.realm" value="requestParameters.realm" />
        <transition to="RouteToProvider" />
    </action-state>

    <decision-state id="RouteToProvider">
        <if test="conversationScope.realm eq 'employee'"
            then="ValidateUsernamePasswordAgainstEmployeeLDAP"
            else="ValidateUsernamePasswordAgainstStudentLDAP"/>
    </decision-state>

    <action-state id="ValidateUsernamePasswordAgainstEmployeeLDAP" parent="authn/conditions#ValidateUsernamePassword">
        <evaluate expression="ValidateUsernamePasswordAgainstEmployeeLDAP" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="proceed" />

        <!-- Fall through to a different flow if login fails on a passive or non-browser request. -->
        <transition on="#{ opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).isPassive() || !opensamlProfileRequestContext.isBrowserProfile() }" to="ReselectFlow" />

        <!-- Other event transitions are determined by deployer in /flows/authn/conditions/conditions-flow.xml -->
    </action-state>

    <action-state id="ValidateUsernamePasswordAgainstStudentLDAP" parent="authn/conditions#ValidateUsernamePassword">
        <evaluate expression="ValidateUsernamePasswordAgainstStudentLDAP" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="proceed" />

        <!-- Fall through to a different flow if login fails on a passive or non-browser request. -->
        <transition on="#{ opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).isPassive() || !opensamlProfileRequestContext.isBrowserProfile() }" to="ReselectFlow" />

        <!-- Other event transitions are determined by deployer in /flows/authn/conditions/conditions-flow.xml -->
    </action-state>

    <bean-import resource="splitauthn-authn-beans.xml" />

</flow>